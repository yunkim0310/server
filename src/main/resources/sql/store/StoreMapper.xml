<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.placeHere.server.dao.store.StoreDao">

    <!-- Closeday -->
    <resultMap id="ClosedayResultMap" type="com.placeHere.server.domain.Closeday">
        <result property="closedayId" column="closeday_id" jdbcType="INTEGER"/>
        <result property="storeId" column="store_id" jdbcType="INTEGER"/>
        <result property="closeday" column="closeday" jdbcType="DATE"/>
        <result property="totalCnt" column="total_cnt" jdbcType="INTEGER"/>
    </resultMap>

    <!-- Menu -->
    <resultMap id="MenuResultMap" type="com.placeHere.server.domain.Menu">
        <result property="menuId" column="menu_id" jdbcType="INTEGER"/>
        <result property="storeId" column="store_id" jdbcType="INTEGER"/>
        <result property="menuNo" column="menu_no" jdbcType="INTEGER"/>
        <result property="menuImg" column="menu_img" jdbcType="VARCHAR"/>
        <result property="menuName" column="menu_name" jdbcType="VARCHAR"/>
        <result property="menuPrice" column="menu_price" jdbcType="INTEGER"/>
        <result property="menuInfo" column="menu_info" jdbcType="VARCHAR"/>
    </resultMap>

    <!-- StoreOperation -->
    <resultMap  id="StoreOperationResultMap" type="com.placeHere.server.domain.StoreOperation">
        <id property="operationId" column="operation_id" javaType="int" jdbcType="INTEGER"/>
        <result property="storeId" column="store_id" javaType="int" jdbcType="INTEGER"/>
        <result property="openTime" column="open_time" jdbcType="TIME"/>
        <result property="closeTime" column="close_time" jdbcType="TIME"/>
        <result property="breakTimeStart" column="break_time_start" jdbcType="TIME"/>
        <result property="breakTimeEnd" column="break_time_end" jdbcType="TIME"/>
        <result property="security" column="security" jdbcType="INTEGER"/>
        <result property="rsrvLimit" column="rsrv_limit" jdbcType="INTEGER"/>
        <result property="effectDt" column="effect_dt" jdbcType="DATE"/>
        <result property="regularCloseday1" column="regular_closeday1" jdbcType="CHAR"/>
        <result property="regularCloseday2" column="regular_closeday2" jdbcType="CHAR"/>
        <result property="regularCloseday3" column="regular_closeday3" jdbcType="CHAR"/>
    </resultMap>

    <!-- StoreNews -->
    <resultMap id="StoreNewsResultMap" type="com.placeHere.server.domain.StoreNews">
        <id property="newsId" column="news_id" javaType="int" jdbcType="INTEGER"/>
        <result property="storeId" column="store_id" javaType="int" jdbcType="INTEGER"/>
        <result property="newsImg" column="news_img" javaType="String" jdbcType="VARCHAR"/>
        <result property="newsContents" column="news_contents" javaType="String" jdbcType="VARCHAR"/>
        <result property="regDt" column="reg_dt" javaType="String" jdbcType="TIMESTAMP"/>
        <result property="totalCnt" column="total_cnt" javaType="int" jdbcType="INTEGER"/>
    </resultMap>

    <!-- Store -->
    <resultMap type="com.placeHere.server.domain.Store" id="StoreResultMap">
        <result property="storeId" column="store_id" jdbcType="INTEGER"/>
        <result property="userName" column="username" jdbcType="VARCHAR"/>
        <result property="businessNo" column="business_no" jdbcType="CHAR"/>
        <result property="storeName" column="store_name" jdbcType="VARCHAR"/>
        <result property="storeAddr" column="store_addr" jdbcType="VARCHAR"/>
        <result property="storePhone" column="store_phone" jdbcType="VARCHAR"/>
        <result property="storeImg1" column="store_img1" jdbcType="VARCHAR"/>
        <result property="storeImg2" column="store_img2" jdbcType="VARCHAR"/>
        <result property="storeImg3" column="store_img3" jdbcType="VARCHAR"/>
        <result property="storeImg4" column="store_img4" jdbcType="VARCHAR"/>
        <result property="storeImg5" column="store_img5" jdbcType="VARCHAR"/>
        <result property="storeInfo" column="store_info" jdbcType="VARCHAR"/>
        <result property="hashtag" column="hashtag" jdbcType="VARCHAR"/>
        <result property="specialMenuNo" column="special_menu_no" jdbcType="INTEGER"/>
        <result property="portOneStoreId" column="portone_store_id" jdbcType="VARCHAR"/>
        <result property="foodCategoryId" column="food_category_id" jdbcType="VARCHAR"/>
<!--        <result property="foodCategory" column="food_category" jdbcType="VARCHAR"/>-->
        <result property="storeStatus" column="store_status" jdbcType="INTEGER"/>
        <result property="reviewCnt" column="review_cnt" jdbcType="INTEGER"/>
        <result property="reviewScoreAvg" column="review_score_avg"/>
        <result property="totalCnt" column="total_cnt" jdbcType="INTEGER"/>
        <result property="storeLocation" column="store_location" jdbcType="VARCHAR"/>

        <association property="amenitiesNoList" column="store_id" select="com.placeHere.server.dao.store.StoreDao.getAmenitiesList"/>
        <association property="menuList" column="store_id" select="com.placeHere.server.dao.store.StoreDao.getMenuList"/>
        <association property="storeNewsList" column="store_id" select="com.placeHere.server.dao.store.StoreDao.getStoreNewsList"/>
        
    </resultMap>

    <!-- 사업자 번호 중복 확인 -->
    <select id="chkDuplicateBusinessNo" parameterType="String" resultType="int">

        SELECT COUNT(business_no)
        FROM store
        WHERE store_status = 0
          AND business_no = #{businessNo}

    </select>

    <!-- 가게 등록 -->
    <insert id="addStore" parameterType="com.placeHere.server.domain.Store" useGeneratedKeys="true" keyProperty="storeId" keyColumn="store_id">

        INSERT INTO store
        (username, business_no, store_name, store_addr, store_location, store_phone,
        store_info, food_category_id, special_menu_no,
        store_img1, store_img2, store_img3,
        store_img4, store_img5, hashtag)
        VALUES
        (#{userName}, #{businessNo}, #{storeName}, #{storeAddr}, #{storeLocation},
         <choose>
             <when test="storePhone != null and storePhone != ''">
                 #{storePhone},
             </when>
             <otherwise>
                 NULL,
             </otherwise>
         </choose>
         <choose>
             <when test="storeInfo != null and storeInfo != ''">
                 #{storePhone},
             </when>
             <otherwise>
                 NULL,
             </otherwise>
         </choose>
         #{foodCategoryId}, #{specialMenuNo},
        <choose>
            <when test="storeImgList[0] != null and storeImgList[0] != ''">
                #{storeImgList[0]}
            </when>
            <otherwise>
                NULL
            </otherwise>
        </choose>,
        <choose>
            <when test="storeImgList[1] != null and storeImgList[1] != ''">
                #{storeImgList[1]}
            </when>
            <otherwise>
                NULL
            </otherwise>
        </choose>,
        <choose>
            <when test="storeImgList[2] != null and storeImgList[2] != ''">
                #{storeImgList[2]}
            </when>
            <otherwise>
                NULL
            </otherwise>
        </choose>,
        <choose>
            <when test="storeImgList[3] != null and storeImgList[3] != ''">
                #{storeImgList[3]}
            </when>
            <otherwise>
                NULL
            </otherwise>
        </choose>,
        <choose>
            <when test="storeImgList[4] != null and storeImgList[4] != ''">
                #{storeImgList[4]}
            </when>
            <otherwise>
                NULL
            </otherwise>
        </choose>,
        <choose>
            <when test="hashtag != null and hashtag != ''">
                #{hashtag}
            </when>
            <otherwise>
                NULL
            </otherwise>
        </choose>
        )

    </insert>


    <!-- 등록된 가게 Id 얻기 -->
    <select id="getStoreId">

        SELECT
            COALESCE((SELECT store_id
                        FROM store
                        WHERE username = #{userName}
                            AND store_status = 0
                        LIMIT 1), 0) AS store_id

    </select>

    <!-- 가게 정보 조회 -->
    <select id="getStore" resultMap="StoreResultMap">

        SELECT s.*, COALESCE(reviews.cnt_review, 0) AS review_cnt, COALESCE(reviews.review_score_avg,0) AS review_score_avg
        FROM store s
            LEFT JOIN (
                SELECT reservation.store_id,
                   COUNT(review.review_no) AS cnt_review,
                   ROUND(SUM(review.review_score) / CASE WHEN COUNT(review.review_no) = 0 THEN 1 ELSE COUNT(review.review_no) END, 1) AS review_score_avg
                FROM review
                JOIN reservation ON review.rsrv_no = reservation.rsrv_no
                WHERE reservation.store_id = #{storeId}
                GROUP BY reservation.store_id
            ) AS reviews ON s.store_id = reviews.store_id
        WHERE s.store_id = #{storeId}
        AND s.store_status = 0

    </select>

    <!-- 가게 검색, 가게 목록 조회 -->
    <select id="getStoreList" parameterType="com.placeHere.server.domain.Search" resultMap="StoreResultMap">

        SELECT *, COUNT(*) OVER() AS total_cnt
        FROM
            (SELECT *
            FROM
                (SELECT s.*, COALESCE(reviews.cnt_review, 0) AS review_cnt, COALESCE(reviews.review_score_avg,0) AS review_score_avg
                FROM store s
                LEFT JOIN (
                    SELECT reservation.store_id,
                    COUNT(review.review_no) AS cnt_review,
                    ROUND(SUM(review.review_score) / CASE WHEN COUNT(review.review_no) = 0 THEN 1 ELSE COUNT(review.review_no) END, 1) AS review_score_avg
                    FROM review
                    JOIN reservation ON review.rsrv_no = reservation.rsrv_no
                    GROUP BY reservation.store_id
                ) AS reviews ON s.store_id = reviews.store_id) AS store_review_score
                <if test="searchKeyword != null and searchKeyword != ''">
                    <where>
                        store_name LIKE CONCAT('%',#{searchKeyword},'%')
                        OR store_addr LIKE CONCAT('%',#{searchKeyword},'%')
                        OR food_category_id LIKE CONCAT('%',#{searchKeyword},'%')
                        OR hashtag LIKE CONCAT('%',#{searchKeyword},'%')
                        OR store_id IN (SELECT store_id FROM menu WHERE menu_name LIKE CONCAT('%',#{searchKeyword},'%'))
                    </where>
                </if>
            ) AS store
        <where>
            store_status = 0
            <if test="regionList != null and !regionList.isEmpty()">
                AND (<foreach collection="regionList" separator="OR" item="region">
                store_addr Like CONCAT('%',#{region},'%')
            </foreach>)
            </if>

            <if test='foodCategoryId != null and !foodCategoryId.equals("")'>
                AND food_category_id LIKE CONCAT('%',#{foodCategoryId},'%')
            </if>

            <if test="hashtagList != null and !hashtagList.isEmpty()">
                AND (
                    <foreach collection="hashtagList" separator="OR" item="hashtag">
                        <if test="hashtag != ''"> hashtag LIKE CONCAT('%',#{hashtag},'%') </if>
                    </foreach>)
            </if>

            <choose>
                <when test="priceMax&lt;100000">
                    AND store_id IN (SELECT store_id FROM menu WHERE menu_price BETWEEN #{priceMin} AND #{priceMax})
                </when>
                <otherwise>
                    AND store_id IN (SELECT store_id FROM menu WHERE menu_price >= #{priceMin})
                </otherwise>
            </choose>

            <if test="amenitiesNoList != null and !amenitiesNoList.isEmpty()">
                AND store_id IN (SELECT store_id FROM amenities WHERE amenities_no IN
                <foreach collection="amenitiesNoList" item="amenitiesNo" open="(" close=")" separator=",">
                    #{amenitiesNo}
                </foreach>)
            </if>
        </where>
        ORDER BY review_score_avg DESC, review_cnt DESC
        <if test="listSize != null and listSize != 0">
            LIMIT #{startRowNum}, #{listSize}
        </if>

    </select>

    <!-- 가게 목록 위치 조회 -->
    <select id="getStoreLocationList" parameterType="com.placeHere.server.domain.Search">

        SELECT CAST(store_id AS CHAR) AS storeId, store_name AS storeName, store_location AS storeLocation
        FROM
        (SELECT *
        FROM
        (SELECT s.*, COALESCE(reviews.cnt_review, 0) AS review_cnt, COALESCE(reviews.review_score_avg,0) AS review_score_avg
        FROM store s
        LEFT JOIN (
        SELECT reservation.store_id,
        COUNT(review.review_no) AS cnt_review,
        ROUND(SUM(review.review_score) / CASE WHEN COUNT(review.review_no) = 0 THEN 1 ELSE COUNT(review.review_no) END, 1) AS review_score_avg
        FROM review
        JOIN reservation ON review.rsrv_no = reservation.rsrv_no
        GROUP BY reservation.store_id
        ) AS reviews ON s.store_id = reviews.store_id) AS store_review_score
        <if test="searchKeyword != null and searchKeyword != ''">
            <where>
                store_name LIKE CONCAT('%',#{searchKeyword},'%')
                OR store_addr LIKE CONCAT('%',#{searchKeyword},'%')
                OR food_category_id LIKE CONCAT('%',#{searchKeyword},'%')
                OR hashtag LIKE CONCAT('%',#{searchKeyword},'%')
                OR store_id IN (SELECT store_id FROM menu WHERE menu_name LIKE CONCAT('%',#{searchKeyword},'%'))
            </where>
        </if>
        ) AS store
        <where>
            store_status = 0
            <if test="regionList != null and !regionList.isEmpty()">
                AND (<foreach collection="regionList" separator="OR" item="region">
                store_addr Like CONCAT('%',#{region},'%')
            </foreach>)
            </if>

            <if test='foodCategoryId != null and !foodCategoryId.equals("")'>
                AND food_category_id LIKE CONCAT('%',#{foodCategoryId},'%')
            </if>

            <if test="hashtagList != null and !hashtagList.isEmpty()">
                AND (
                <foreach collection="hashtagList" separator="OR" item="hashtag">
                    <if test="hashtag != ''"> hashtag LIKE CONCAT('%',#{hashtag},'%') </if>
                </foreach>)
            </if>

            <choose>
                <when test="priceMax&lt;100000">
                    AND store_id IN (SELECT store_id FROM menu WHERE menu_price BETWEEN #{priceMin} AND #{priceMax})
                </when>
                <otherwise>
                    AND store_id IN (SELECT store_id FROM menu WHERE menu_price >= #{priceMin})
                </otherwise>
            </choose>

            <if test="amenitiesNoList != null and !amenitiesNoList.isEmpty()">
                AND store_id IN (SELECT store_id FROM amenities WHERE amenities_no IN
                <foreach collection="amenitiesNoList" item="amenitiesNo" open="(" close=")" separator=",">
                    #{amenitiesNo}
                </foreach>)
            </if>
        </where>
        ORDER BY review_score_avg DESC, review_cnt DESC

    </select>

    <!-- 가게 목록 위치 조회 -->
    <select id="getStoreLocation">

        SELECT CAST(store_id AS CHAR) AS storeId, store_name AS storeName, store_location AS storeLocation
        FROM store
        WHERE store_id = #{storeId}

    </select>

    <!-- 가게 수정 -->
    <update id="updateStore" parameterType="com.placeHere.server.domain.Store">

        UPDATE store
        SET store_name=#{storeName},
            store_addr=#{storeAddr},
            store_location=#{storeLocation},
            store_phone=
                <choose>
                    <when test="storePhone != null and storePhone != ''">
                        #{storePhone}
                    </when>
                    <otherwise>
                        NULL
                    </otherwise>
                </choose>,
            store_info=
                <choose>
                    <when test="storeInfo != null and storeInfo != ''">
                        #{storeInfo}
                    </when>
                    <otherwise>
                        NULL
                    </otherwise>
                </choose>,
            food_category_id=#{foodCategoryId}, special_menu_no=#{specialMenuNo},

            <if test="storeImgList[0] != null and storeImgList[0] != ''">store_img1=#{storeImgList[0]},</if>
            <if test="storeImgList[1] != null and storeImgList[1] != ''">store_img1=#{storeImgList[1]},</if>
            <if test="storeImgList[2] != null and storeImgList[2] != ''">store_img1=#{storeImgList[2]},</if>
            <if test="storeImgList[3] != null and storeImgList[3] != ''">store_img1=#{storeImgList[3]},</if>
            <if test="storeImgList[4] != null and storeImgList[4] != ''">store_img1=#{storeImgList[4]},</if>

            hashtag=
                <choose>
                    <when test="hashtag != null and hashtag != ''">
                        #{hashtag}
                    </when>
                    <otherwise>
                        NULL
                    </otherwise>
                </choose>
        WHERE store_id = #{storeId}

    </update>

    <!-- 가게 삭제 -->
    <update id="removeStore" parameterType="int">

        UPDATE store
        SET store_status = 1
        WHERE store_id = #{storeId}

    </update>

    <!-- 편의시설 등록 -->
    <insert id="addAmenities" parameterType="map">

        INSERT INTO amenities(store_id, amenities_no)
        VALUES
        <foreach collection="amenitiesNoList" item="amenitiesNo" separator=",">
            (#{storeId}, #{amenitiesNo})
        </foreach>

    </insert>

    <!-- 편의시설 목록 조회 -->
    <select id="getAmenitiesList">

        SELECT amenities_no
        FROM amenities
        WHERE store_id = #{storeId}
        ORDER BY amenities_no

    </select>

    <!-- 편의시설 삭제 (통채로 삭제후 다시 등록) -->
    <delete id="removeAmenities" parameterType="int">

        DELETE FROM amenities
        WHERE store_id = #{storeId}

    </delete>

    <!-- 메뉴 등록 -->
    <insert id="addMenu" parameterType="map">

        INSERT INTO Menu (store_id, menu_no, menu_img, menu_name, menu_price, menu_info)
        VALUES
        <foreach collection="menuList" item="menu" separator=",">
            (
            #{storeId},
            #{menu.menuNo},
            <choose>
                <when test="menu.menuImg != null and menu.menuImg != ''">
                    #{menu.menuImg}
                </when>
                <otherwise>
                    NULL
                </otherwise>
            </choose>,
            #{menu.menuName},
            #{menu.menuPrice},
            <choose>
                <when test="menu.menuInfo!= null and menu.menuInfo != ''">
                    #{menu.menuInfo}
                </when>
                <otherwise>
                    NULL
                </otherwise>
            </choose>
            )
        </foreach>

    </insert>

    <!-- 메뉴 목록 조회 -->
    <select id="getMenuList" resultMap="MenuResultMap">

        SELECT *
        FROM menu
        WHERE store_id = #{storeId}
        ORDER BY menu_no

    </select>

    <!-- 메뉴 삭제 (통채로 삭제후 다시 등록) -->
    <delete id="removeMenu" parameterType="int">

        DELETE FROM menu
        WHERE store_id = #{storeId}

    </delete>

    <!-- 가게 운영 등록 -->
    <insert id="addOperation" parameterType="com.placeHere.server.domain.StoreOperation">

        INSERT INTO operation
        (store_id, open_time, close_time, break_time_start, break_time_end,
         security, rsrv_limit,
         regular_closeday1, regular_closeday2, regular_closeday3, effect_dt)
        VALUES
            (#{storeId}, #{openTime}, #{closeTime}, #{breakTimeStart}, #{breakTimeEnd},
             #{security}, #{rsrvLimit},
             <if test="regularClosedayList != null and regularClosedayList.size() > 0">
                #{regularClosedayList[0]}, #{regularClosedayList[1]}, #{regularClosedayList[2]},
             </if>
             <if test="regularClosedayList == null || regularClosedayList.size() == 0">
                 NULL, NULL, NULL,
             </if>
             #{effectDt})

    </insert>

    <!-- 가게 운영 조회 (선택한 날짜에 적용되고 있는 운영 정보 조회) -->
    <select id="getOperationByDt" resultMap="StoreOperationResultMap">

        SELECT
            operation_id, store_id, open_time, close_time, break_time_start, break_time_end,
            security, rsrv_limit, regular_closeday1, regular_closeday2, regular_closeday3,
            effect_dt
        FROM operation
        WHERE store_id = #{storeId}
        AND effect_dt &lt;= #{effectDt}
        ORDER BY operation_id DESC
        LIMIT 1

    </select>


    <!-- 최신 가게 운영 조회 -->
    <select id="getCurrOperation"
            parameterType="int"
            resultMap="StoreOperationResultMap">

        SELECT
            operation_id, store_id, open_time, close_time, break_time_start, break_time_end,
            security, rsrv_limit, regular_closeday1, regular_closeday2, regular_closeday3,
            effect_dt
        FROM operation
        WHERE store_id = #{storeId}
        ORDER BY operation_id DESC
        LIMIT 1

    </select>

    <!-- 매장 소식 등록 -->
    <insert id="addStoreNews" parameterType="com.placeHere.server.domain.StoreNews">

        INSERT INTO store_news
            (store_id, news_img, news_contents, reg_dt)
        VALUES
            (#{storeId},
             <choose>
                 <when test="newsImg != null and newsImg != ''">
                     #{newsImg},
                 </when>
                 <otherwise>
                     NULL,
                 </otherwise>
             </choose>
             #{newsContents}, NOW())

    </insert>

    <!-- 매장 소식 목록 조회 -->
    <select id="getStoreNewsList" parameterType="map" resultMap="StoreNewsResultMap">

        SELECT *, COUNT(*) OVER() AS total_cnt
        FROM store_news
        WHERE store_id = #{storeId}
        ORDER BY news_id DESC
        LIMIT #{search.startRowNum}, #{search.listSize}

    </select>

    <!-- 매장 소식 수정 -->
    <update id="updateStoreNews" parameterType="com.placeHere.server.domain.StoreNews">

        UPDATE store_news
        SET <if test="newsImg != null and newsImg != ''">news_img=#{newsImg},</if> news_contents=#{newsContents}
        WHERE news_id = #{newsId}

    </update>

    <!-- 매장 소식 삭제 -->
    <delete id="removeStoreNews" parameterType="int">

        DELETE FROM store_news
        WHERE news_id = #{newsId}

    </delete>

    <!-- 휴무일 등록 -->
    <insert id="addCloseday" parameterType="com.placeHere.server.domain.Closeday">

        INSERT INTO closeday(store_id, closeday)
        VALUES (#{storeId}, #{closeday})

    </insert>

    <!-- 휴무일 목록 조회 -->
    <select id="getClosedayListBySearch" parameterType="map" resultMap="ClosedayResultMap">

        SELECT *, COUNT(*) OVER() AS total_cnt
        FROM closeday
        WHERE store_id = #{storeId}
          AND closeday BETWEEN #{search.startDate} AND #{search.endDate}
        ORDER BY closeday
        LIMIT #{search.startRowNum}, #{search.listSize}

    </select>
    
    <!-- 휴무일 목록 조회 (오늘~14일후) -->
    <select id="getClosedayList">

        SELECT closeday
        FROM closeday
        WHERE store_id = #{storeId}
        AND closeday >= CURRENT_DATE()
        ORDER BY closeday;

    </select>

    <!-- 휴무일 삭제 -->
    <delete id="removeCloseday" parameterType="int">

        DELETE FROM closeday
        WHERE closeday_id = #{closedayId}

    </delete>

    <!-- 금주 요일별 예약횟수 -->
    <select id="cntWeekRsrv">

        SELECT
            COALESCE(COUNT(rsrv_dt), 0)
        FROM
            (SELECT 1 AS day UNION ALL
             SELECT 2 UNION ALL
             SELECT 3 UNION ALL
             SELECT 4 UNION ALL
             SELECT 5 UNION ALL
             SELECT 6 UNION ALL
             SELECT 7) AS all_days
                LEFT JOIN reservation
                ON DAYOFWEEK(rsrv_dt) = all_days.day
                AND store_id = #{storeId}
                AND rsrv_status IN ('전화 예약', '예약 확정', '이용 완료', '리뷰 완료')
                AND rsrv_dt BETWEEN
                    DATE_SUB(CURDATE(), INTERVAL (DAYOFWEEK(CURDATE()) - 1) DAY)
                    AND DATE_ADD(CURDATE(), INTERVAL (8 - DAYOFWEEK(CURDATE())) DAY)
        GROUP BY day
        ORDER BY day;

    </select>

    <!-- 요일별 평균 예약횟수 -->
    <select id="cntRsrvAvg">

        SELECT
            ROUND(IFNULL(DailyReservationCounts.reservation_count / NULLIF(Weeks.week_count, 0), 0), 0)
        FROM
            (SELECT
                 DayOfWeekReservations.day_of_week,
                 IFNULL(SUM(reservation_count), 0) AS reservation_count
            FROM
                 (SELECT '일' AS day_of_week UNION ALL
                  SELECT '월' UNION ALL
                  SELECT '화' UNION ALL
                  SELECT '수' UNION ALL
                  SELECT '목' UNION ALL
                  SELECT '금' UNION ALL
                  SELECT '토') AS DayOfWeekReservations

            LEFT JOIN
                 (SELECT
                      CASE
                          WHEN DAYOFWEEK(rsrv_dt) = 1 THEN '일'
                          WHEN DAYOFWEEK(rsrv_dt) = 2 THEN '월'
                          WHEN DAYOFWEEK(rsrv_dt) = 3 THEN '화'
                          WHEN DAYOFWEEK(rsrv_dt) = 4 THEN '수'
                          WHEN DAYOFWEEK(rsrv_dt) = 5 THEN '목'
                          WHEN DAYOFWEEK(rsrv_dt) = 6 THEN '금'
                          WHEN DAYOFWEEK(rsrv_dt) = 7 THEN '토'
                          END AS day_of_week,
                      COUNT(*) AS reservation_count
                  FROM reservation
                  WHERE store_id = #{storeId}
                    AND rsrv_status IN ('전화 예약', '예약 확정', '이용 완료', '리뷰 완료')
                  GROUP BY day_of_week) AS ReservationCounts
            ON DayOfWeekReservations.day_of_week = ReservationCounts.day_of_week
            GROUP BY DayOfWeekReservations.day_of_week) AS DailyReservationCounts,

            (SELECT
                 COUNT(DISTINCT WEEK(rsrv_dt)) AS week_count
             FROM reservation
             WHERE store_id = #{storeId}) AS Weeks

        GROUP BY DailyReservationCounts.day_of_week, Weeks.week_count
        ORDER BY FIELD(day_of_week, '일', '월', '화', '수', '목', '금', '토');

    </select>

    <!-- 성별, 나이대별 예약비율 -->
    <select id="calcRsrvPercent">

        SELECT
        CONCAT(
        CASE
            WHEN YEAR(CURDATE()) - LEFT(u.birth, 4) &lt; 20 THEN '10대'
            WHEN YEAR(CURDATE()) - LEFT(u.birth, 4) BETWEEN 20 AND 29 THEN '20대'
            WHEN YEAR(CURDATE()) - LEFT(u.birth, 4) BETWEEN 30 AND 39 THEN '30대'
            WHEN YEAR(CURDATE()) - LEFT(u.birth, 4) BETWEEN 40 AND 49 THEN '40대'
            WHEN YEAR(CURDATE()) - LEFT(u.birth, 4) BETWEEN 50 AND 59 THEN '50대'
            ELSE '60대이상'
        END,
        ' ',
        CASE u.gender
            WHEN 'M' THEN '남성'
            WHEN 'F' THEN '여성'
        END
        ) AS x,

        ROUND(
        COUNT(r.rsrv_no) /
        COALESCE(
        (SELECT COUNT(*)
        FROM reservation r2
        WHERE r2.store_id = #{storeId}
        AND r2.rsrv_status IN ('전화 예약', '예약 확정', '이용 완료', '리뷰 완료')
        ), 1) * 100, 0
        ) AS y

        FROM reservation r
        JOIN user u ON r.user_name = u.username
        WHERE r.store_id = #{storeId}
        AND r.rsrv_status IN ('전화 예약', '예약 확정', '이용 완료', '리뷰 완료')
        AND u.birth IS NOT NULL
        AND u.gender IN ('M', 'F')
        AND u.role = 'ROLE_USER'

        GROUP BY x

        ORDER BY FIELD(x,
        '10대 남성', '20대 남성', '30대 남성', '40대 남성', '50대 남성', '60대이상 남성',
        '10대 여성', '20대 여성', '30대 여성', '40대 여성', '50대 여성', '60대이상 여성');

    </select>

    <!-- 인기 가게 찾기용 -->
    <select id="getStoreListById" resultMap="StoreResultMap">

        SELECT *
        FROM store
        WHERE store_id IN (
            <foreach collection="storeIdList" item="storeId" separator=",">
                #{storeId}
            </foreach>
        )

    </select>

</mapper>